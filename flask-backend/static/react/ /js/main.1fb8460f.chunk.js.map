{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetForm","setState","baseState","state","data","isLoading","flag","value1","value2","value3","value4","value5","dummy_values","handleSubmit","bind","assertThisInitialized","click","handleRadioChange","_this2","request_info","template","regular","dynamic","workflow","movie","input_type","axios","post","headers","Content-Type","then","response","console","log","catch","err","src","concat","event","target","value","preventDefault","react_default","a","createElement","className","window","token","class","id","placeholder","onChange","handleChange1","loading","toString","replace","type","onClick","disabled","handleChange2","handleChange3","handleChange4","handleChange5","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":" /js/main.1fb8460f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nexport default class App extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = { \n        data: '',\n        isLoading: false,\n        flag: ' ',\n        value1: ' ', \n        value2: ' ',\n        value3: ' ',\n        value4: ' ',\n        value5: ' ',\n        dummy_values: false,\n\n        };\n        //for reset\n        this.baseState = this.state \n\n\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.click = this.click.bind(this);\n        this.handleRadioChange = this.handleRadioChange.bind(this);\n        \n        \n    }\n\n  resetForm = () => {\n    this.setState(this.baseState)\n  }     \n\n\n\n click() {\n   /*     template: $('#template').val(),\n            console.log($('#template').val())\n            values: $('#values').val(),\n            input_type: input_type,\n            //boolean\n            showwhitespaces: is_checked_showwhitespaces,\n            dummyvalues: is_checked_dummyvalues*/\n        var headers = {\n            'Content-Type': 'application/json',\n           \n        }\n\n\n        const request_info = {\n            template: this.state.value1,\n            //reg\n            regular: this.state.value2 ,\n            //dyn\n            dynamic: this.state.value3,\n            workflow: this.state.value4,\n            movie: this.state.value5,\n\n            input_type: \"json\",\n            //depends on what is selected will send either DYNAMIC, WORKFLOW or MOVIE\n            flag: this.state.flag,\n            dummy_values: this.state.dummy_values,\n        }\n\n        this.setState({ isLoading: true });\n\n\n\n\n\n        axios.post(\"http://localhost:5000/convert\", {request_info}, {headers: headers})\n            .then((response) => {\n                  this.setState({ data: response.data, isLoading: false });\n                     \n                   console.log(request_info)\n             })\n            .catch((err) => {\n                  this.setState({ data: err, isLoading: false });\n                  \n                   console.log(request_info)\n             });\n    }\n\n\n\n  handleRadioChange(src) {\n    this.setState({flag: src});\n     console.log(`You chose${src} `);\n  }\n\n\n  handleChange1(event) {\n    this.setState({value1: event.target.value});\n  }\n\n\n  handleChange2(event) {\n     this.setState({value2: event.target.value});\n  }\n handleChange3(event) {\n     this.setState({value3: event.target.value});\n  }\n\n handleChange4(event) {\n     this.setState({value4: event.target.value});\n  }\n\n handleChange5(event) {\n     this.setState({value5: event.target.value});\n  }\n\n\n  toggleDummy(event) {\n   this.setState({dummy_values: !this.state.dummy_values});\n}\n\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n}\n    \n\n\n    \n\n\n  \n  render() {\n\n\n    return (\n     <div className=\"App\">\n   <p>\n      {window.token}\n   </p>\n   <form class=\"container\">\n      <div class=\"row\">\n\n         <div class=\"col-md-5\">\n            <h2>Template</h2>\n            <textarea id=\"template\" value={this.state.value1} placeholder=\" Hello {{name}}! {% if test -%} How are you?{%- endif %}\" onChange={this.handleChange1.bind(this)}/>\n            \n         </div>\n\n         <div class=\"col-md-5\">\n         <h2>Render</h2>\n         <div id=\"render\"> {this.state.loading || !this.state.data ? < div id=\"render\"></div> : <div>{this.state.data.toString().replace(/â€¢/g, \" \")}</div>}\n         </div>\n\n         <div class=\"col-md-2\">\n           <input type=\"button\" class=\"btn btn-success\" id=\"convert\" value=\"Convert\" onClick={this.click} disabled={this.state.isLoading}/>\n           <input type=\"button\" class=\"btn btn-danger\" id=\"clear\" value=\"Clear\" onClick={this.resetForm}/>\n         </div>\n      </div>\n\n\n</div>\n  <div class=\"row\">\n   <div class=\"col-md-5\">\n      <h2>Regular</h2>\n      <textarea id=\"values\" value={this.state.value2} placeholder={\"{\\\"name\\\": \\\"John\\\", \\\"test\\\": true }\"}  onChange={this.handleChange2.bind(this)}></textarea>\n   </div>\n   <div class=\"col-md-5\">\n      <h2>DYNAMIC_PRESET_DATA</h2>\n      <textarea id=\"values\" value={this.state.value3} placeholder={\" \\\"DYNAMIC_PRESET_DATA\\\" : {\\\"name\\\": \\\"John\\\", \\\"test\\\": true }\"}  onChange={this.handleChange3.bind(this)}></textarea>\n   </div>\n   <div class=\"col-md-5\">\n      <h2>WORKFLOW_METADATA</h2>\n      <textarea id=\"values\" value={this.state.value4}  placeholder={\" \\\"WORKFLOW_METADATA\\\" : {\\\"name\\\": \\\"John\\\", \\\"test\\\": true }\"}  onChange={this.handleChange4.bind(this)}></textarea>\n   </div>\n   <div class=\"col-md-5\">\n      <h2>MOVIE_METADATA</h2>\n      <textarea id=\"values\" value={this.state.value5} placeholder={\" \\\"MOVIE_METADATA\\\" : {\\\"name\\\": \\\"John\\\", \\\"test\\\": true }\"}  onChange={this.handleChange5.bind(this)}></textarea>\n   </div>\n</div>\n</form>\n</div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}